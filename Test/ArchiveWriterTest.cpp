/*
  Copyright 2014 International Business Machines, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

#include "BigFix/ArchiveWriter.cpp"
#include "BigFix/Error.h"
#include "TestUtility.h"
#include <gtest/gtest.h>

using namespace BigFix;

TEST( ArchiveWriterTest, EmptyArchive )
{
  std::vector<uint8_t> output;
  VectorStream vectorStream( output );
  ArchiveWriter writer( vectorStream );

  writer.End();

  uint8_t expected[] = { 0x5f, 0x00 };

  ASSERT_EQ( sizeof( expected ), output.size() );
  ASSERT_TRUE( std::equal( output.begin(), output.end(), expected ) );
  EXPECT_TRUE( vectorStream.ended );
}

TEST( ArchiveWriterTest, BasicArchive )
{
  std::vector<uint8_t> output;
  VectorStream vectorStream( output );
  ArchiveWriter writer( vectorStream );

  writer.Directory( "hello",
                    DateTime( DataRef( "Tue, 01 Jul 2014 07:23:00 +0000" ) ) );

  WriteAndEnd(
    writer.File( "hello/world.txt",
                 DateTime( DataRef( "Tue, 01 Jul 2014 07:23:00 +0000" ) ),
                 13 ),
    DataRef( "Hello, world!" ) );

  WriteAndEnd(
    writer.File( "hello/empty.txt",
                 DateTime( DataRef( "Tue, 01 Jul 2014 07:23:00 +0000" ) ),
                 0 ),
    DataRef() );

  writer.End();

  uint8_t expected[] =
  {
    0x5f, 0x07, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x00, 0x1f, 0x54, 0x75,
    0x65, 0x2c, 0x20, 0x30, 0x31, 0x20, 0x4a, 0x75, 0x6c, 0x20, 0x32, 0x30,
    0x31, 0x34, 0x20, 0x30, 0x37, 0x3a, 0x32, 0x33, 0x3a, 0x30, 0x30, 0x20,
    0x2b, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x10, 0x68,
    0x65, 0x6c, 0x6c, 0x6f, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x74,
    0x78, 0x74, 0x00, 0x1f, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x30, 0x31, 0x20,
    0x4a, 0x75, 0x6c, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x30, 0x37, 0x3a,
    0x32, 0x33, 0x3a, 0x30, 0x30, 0x20, 0x2b, 0x30, 0x30, 0x30, 0x30, 0x0d,
    0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f,
    0x72, 0x6c, 0x64, 0x21, 0x5f, 0x10, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2f,
    0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x74, 0x78, 0x74, 0x00, 0x1f, 0x54,
    0x75, 0x65, 0x2c, 0x20, 0x30, 0x31, 0x20, 0x4a, 0x75, 0x6c, 0x20, 0x32,
    0x30, 0x31, 0x34, 0x20, 0x30, 0x37, 0x3a, 0x32, 0x33, 0x3a, 0x30, 0x30,
    0x20, 0x2b, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00
  };

  ASSERT_EQ( sizeof( expected ), output.size() );
  ASSERT_TRUE( std::equal( output.begin(), output.end(), expected ) );
  EXPECT_TRUE( vectorStream.ended );
}

TEST( ArchiveWriterTest, HugeFile )
{
  std::vector<uint8_t> output;
  VectorStream vectorStream( output );
  ArchiveWriter writer( vectorStream );

  writer.File( "huge_file",
               DateTime( DataRef( "Tue, 01 Jul 2014 07:54:26 +0000" ) ),
               4294967296 );

  uint8_t expected[] =
  {
    0x31, 0x0a, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x00,
    0x1f, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x30, 0x31, 0x20, 0x4a, 0x75, 0x6c,
    0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x30, 0x37, 0x3a, 0x35, 0x34, 0x3a,
    0x32, 0x36, 0x20, 0x2b, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00
  };

  ASSERT_EQ( sizeof( expected ), output.size() );
  ASSERT_TRUE( std::equal( output.begin(), output.end(), expected ) );
}

TEST( ArchiveWriterTest, UTF8File )
{
  std::vector<uint8_t> output;
  VectorStream vectorStream( output );
  ArchiveWriter writer( vectorStream );

  const uint8_t konnichiwa[] =
  {
    0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab, 0xe3, 0x81, 0xa1,
    0xe3, 0x81, 0xaf, 0x00
  };

  WriteAndEnd(
    writer.File( reinterpret_cast<const char*>( konnichiwa ),
                 DateTime( DataRef( "Tue, 01 Jul 2014 08:07:02 +0000" ) ),
                 5 ),
    DataRef( "hello" ) );

  writer.End();

  uint8_t expected[] =
  {
    0x32, 0x5f, 0x10, 0xe3, 0x81, 0x93, 0xe3, 0x82, 0x93, 0xe3, 0x81, 0xab,
    0xe3, 0x81, 0xa1, 0xe3, 0x81, 0xaf, 0x00, 0x1f, 0x54, 0x75, 0x65, 0x2c,
    0x20, 0x30, 0x31, 0x20, 0x4a, 0x75, 0x6c, 0x20, 0x32, 0x30, 0x31, 0x34,
    0x20, 0x30, 0x38, 0x3a, 0x30, 0x37, 0x3a, 0x30, 0x32, 0x20, 0x2b, 0x30,
    0x30, 0x30, 0x30, 0x05, 0x00, 0x00, 0x00, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
    0x5f, 0x00
  };


  ASSERT_EQ( sizeof( expected ), output.size() );
  ASSERT_TRUE( std::equal( output.begin(), output.end(), expected ) );
  EXPECT_TRUE( vectorStream.ended );
}

TEST( ArchiveWriterTest, ThrowsOnPathTooLong )
{
  NullStream nullStream;
  ArchiveWriter writer( nullStream );

  std::string length254( 254, 'x' );
  std::string length255( 255, 'x' );

  WriteAndEnd( writer.File( length254.c_str(), DateTime(), 0 ), DataRef() );
  EXPECT_THROW( writer.File( length255.c_str(), DateTime(), 0 ), Error );
}

TEST( ArchiveWriterTest, ThrowsOnInvalidUTF8 )
{
  NullStream nullStream;
  ArchiveWriter writer( nullStream );

  static const uint8_t konnichiwa_shiftjis[] =
  {
    0x82, 0xB1, 0x82, 0xF1, 0x82, 0xC9, 0x82, 0xBF, 0x82, 0xCD, 0x00
  };

  EXPECT_THROW(
    writer.File(
      reinterpret_cast<const char*>( konnichiwa_shiftjis ), DateTime(), 0 ),
    Error );
}
